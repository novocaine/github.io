{"version":3,"sources":["../../../../www/js/app/util.js"],"names":[],"mappings":";;AAAA,OAAO,EAAP,EACA,YAAM;AACJ,MAAM,YAAY;AAChB,kBAAc,sBAAC,MAAD,EAAY;;AAExB,aAAO,OAAO,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,MAA/B,MAA2C,uBAA3C,CAFiB;KAAZ;;AAKd,iBAAa,qBAAC,OAAD;aAAa,IAAI,YAAJ,CAAiB,OAAjB;KAAb;;AAEb,oBAAgB,wBAAC,GAAD,EAAM,UAAN,EAAqB;AACnC,aAAO,MAAM,IAAN,GAAa,UAAb,CAD4B;KAArB;;AAIhB,iBAAa,qBAAC,GAAD,EAAM,UAAN,EAAqB;AAChC,aAAO,MAAM,UAAU,cAAV,CAAyB,GAAzB,EAA8B,UAA9B,CAAN,CADyB;KAArB;GAZT,CADF;;AAkBJ,SAAO,SAAP,CAlBI;CAAN,CADA","file":"util.js","sourcesContent":["define([],\n() => {\n  const functions = {\n    isAudioArray: (object) => {\n      // typeof doesn't even remotely work :/\n      return Object.prototype.toString.call(object) === '[object Float32Array]';\n    },\n\n    allocBuffer: (samples) => new Float32Array(samples),\n\n    bpmToFrequency: (bpm, sampleRate) => {\n      return bpm / 60.0 / sampleRate;\n    },\n\n    bpmToPeriod: (bpm, sampleRate) => {\n      return 1.0 / functions.bpmToFrequency(bpm, sampleRate);\n    }\n  };\n\n  return functions;\n});\n"]}