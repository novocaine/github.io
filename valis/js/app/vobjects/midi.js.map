{"version":3,"sources":["../../../../../www/js/app/vobjects/midi.js"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,CAAC,QAAD,EAAW,sBAAX,EAAmC,SAAnC,CAAP,EAAsD,UAAC,CAAD,EAAI,OAAJ,EAAa,OAAb,EAAyB;MACvE;;;;;kCACQ;AAAE,eAAO,CAAP,CAAF;;;;mCACC;AAAE,eAAO,CAAP,CAAF;;;;AAEb,aAJI,IAIJ,CAAY,OAAZ,EAAqB;4BAJjB,MAIiB;;yEAJjB,iBAKI,UADa;;AAEnB,YAAK,SAAL,GAAiB,EAAjB,CAFmB;;AAInB,UAAI,UAAU,iBAAV,EAA6B;AAC/B,kBAAU,iBAAV,CAA4B,EAA5B,EAAgC,IAAhC,CAAqC,UAAC,UAAD,EAAgB;;;;;;;;AAGnD,iCAAoB,WAAW,MAAX,0BAApB,oGAAuC;kBAA5B,oBAA4B;;AACrC,oBAAM,CAAN,EAAS,aAAT,GAAyB,EAAE,IAAF,CAAO,MAAK,aAAL,OAAP,CAAzB,CADqC;AAErC,sBAAQ,GAAR,4BAAqC,MAAM,CAAN,EAAS,IAAT,CAArC,CAFqC;aAAvC;;;;;;;;;;;;;;WAHmD;SAAhB,EAQrC,UAAC,CAAD,EAAO;;AAEL,gBAAM,oCAAkC,EAAE,QAAF,EAAlC,CAAN,CAFK;SAAP,CARA,CAD+B;OAAjC,MAaO;AACL,cAAM,MAAM,oCAAN,CAAN,CADK;OAbP;mBAJmB;KAArB;;iBAJI;;oCA0BU,OAAO;;;AAGnB,YAAM,OAAO,MAAM,IAAN,CAHM;AAInB,YAAM,UAAU;AACd,eAAK,KAAK,CAAL,KAAW,CAAX;AACL,mBAAS,KAAK,CAAL,IAAU,GAAV;AACT,gBAAM,KAAK,CAAL,IAAU,IAAV;AACN,gBAAM,KAAK,CAAL,CAAN;AACA,oBAAU,KAAK,CAAL,CAAV;AACA,qBAAW,MAAM,YAAN;SANP,CAJa;AAYnB,aAAK,SAAL,CAAe,IAAf,CAAoB,OAApB,EAZmB;;;;+BAeZ,SAAS,QAAQ,SAAS;AACjC,YAAM,SAAS,CAAC,KAAK,SAAL,CAAe,GAAf,CAAmB,UAAC,GAAD,EAAS;;;AAG1C,cAAM,aAAa,KAAK,KAAL,CAAW,CAAE,IAAI,SAAJ,GAAgB,QAAQ,YAAR,CAAjB,GAAyC,MAAzC,GAC7B,QAAQ,UAAR,GAAsB,QAAQ,UAAR,CADlB,CAHoC;AAK1C,iBAAO,IAAI,OAAJ,CAAY,UAAZ,EAAwB,GAAxB,CAAP,CAL0C;SAAT,CAApB,CAAT,CAD2B;AAQjC,aAAK,SAAL,GAAiB,EAAjB,CARiC;AASjC,eAAO,MAAP,CATiC;;;;WAzC/B;IAAa,QAAQ,OAAR,EAD0D;;AAuD7E,OAAK,YAAL,GAAoB,MAApB,CAvD6E;AAwD7E,OAAK,aAAL,GAAqB,MAArB,CAxD6E;;AA0D7E,SAAO,IAAP,CA1D6E;CAAzB,CAAtD","file":"midi.js","sourcesContent":["define(['lodash', 'app/vobjects/vobject', 'app/msg'], (_, vobject, Message) => {\n  class Midi extends vobject.VObject {\n    numInputs() { return 0; }\n    numOutputs() { return 1; }\n\n    constructor(options) {\n      super(options);\n      this._messages = [];\n\n      if (navigator.requestMIDIAccess) {\n        navigator.requestMIDIAccess({}).then((midiAccess) => {\n          // success. TODO: this listens on all interfaces, should be a way to\n          // select\n          for (const input of midiAccess.inputs) {\n            input[1].onmidimessage = _.bind(this.onMIDIMessage, this);\n            console.log(`registered midi input ${input[1].name}`);\n          }\n        },\n        (e) => {\n          // failure\n          throw Error(`Error initializing MIDI: ${e.toString()}`);\n        });\n      } else {\n        throw Error('This browser does not support MIDI');\n      }\n    }\n\n    onMIDIMessage(event) {\n      // the message format is pretty damn unwieldy, so convert it into\n      // something legible..\n      const data = event.data;\n      const message = {\n        cmd: data[0] >> 4,\n        channel: data[0] & 0xf,\n        type: data[0] & 0xf0,\n        note: data[1],\n        velocity: data[2],\n        timeStamp: event.receivedTime\n      };\n      this._messages.push(message);\n    }\n\n    generate(context, inputs, outputs) {\n      const result = [this._messages.map((msg) => {\n        // this is going to be a time before the start of the current context's\n        // sampleTime, as the note happened in the past\n        const sampleTime = Math.round(((msg.timeStamp - context.domTimestamp) / 1000.0 *\n          context.sampleRate) + context.sampleTime);\n        return new Message(sampleTime, msg);\n      })];\n      this._messages = [];\n      return result;\n    }\n  }\n\n  Midi.vobjectClass = 'midi';\n  Midi.vobjectSymbol = 'midi';\n\n  return Midi;\n});\n"]}