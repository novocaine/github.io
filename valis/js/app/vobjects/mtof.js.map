{"version":3,"sources":["../../../../../www/js/app/vobjects/mtof.js"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,CAAC,QAAD,EAAW,sBAAX,EAAmC,SAAnC,CAAP,EAAsD,UAAC,CAAD,EAAI,OAAJ,EAAa,OAAb,EAAyB;MACvE;;;;;kCACQ;AAAE,eAAO,CAAP,CAAF;;;;mCACC;AAAE,eAAO,CAAP,CAAF;;;;AAEb,aAJI,IAIJ,CAAY,OAAZ,EAAqB;4BAJjB,MAIiB;;yEAJjB,iBAKI,UADa;;AAEnB,YAAK,SAAL,GAAiB,GAAjB,CAFmB;AAGnB,YAAK,QAAL,GAAgB,CAAhB,CAHmB;;KAArB;;iBAJI;;+BAUK,SAAS,QAAQ,SAAS;;;AACjC,YAAM,SAAS,QAAQ,SAAR,EAAT,CAD2B;AAEjC,YAAM,WAAW,EAAX,CAF2B;AAGjC,YAAI,eAAe,CAAf,CAH6B;;AAKjC,YAAI,OAAO,CAAP,CAAJ,EAAe;AACb,iBAAO,CAAP,EAAU,OAAV,CAAkB,UAAC,GAAD,EAAS;;AAEzB,gBAAI,IAAI,IAAJ,CAAS,IAAT,KAAkB,IAAlB,EAAwB;;AAC1B,qBAAK,SAAL,GAAiB,OAAK,uBAAL,CAA6B,IAAI,IAAJ,CAAS,IAAT,CAA9C;;;;;;;AAD0B,kBAQtB,eAAe,GAAC,CAAI,UAAJ,GAAiB,OAAO,MAAP,GAAiB,QAAQ,UAAR,CAR5B;AAS1B,kBAAI,eAAe,CAAf,EAAkB;AACpB,+BAAe,CAAf,CADoB;eAAtB;AAGA,qBAAO,IAAP,CAAY,OAAK,SAAL,EAAgB,YAA5B,EAA0C,YAA1C,EAZ0B;AAa1B,6BAAe,YAAf,CAb0B;AAc1B,uBAAS,IAAT,CAAc,IAAI,OAAJ,CAAY,IAAI,UAAJ,GAAiB,OAAO,MAAP,EAAe,CAA5C,CAAd,EAd0B;AAe1B,qBAAK,QAAL,GAf0B;aAA5B,MAgBO,IAAI,IAAI,IAAJ,CAAS,IAAT,KAAkB,IAAlB,EAAwB;;AAEjC,kBAAI,EAAE,OAAK,QAAL,KAAkB,CAApB,EAAuB;AACzB,yBAAS,IAAT,CAAc,IAAI,OAAJ,CAAY,IAAI,UAAJ,GAAiB,OAAO,MAAP,EAAe,CAA5C,CAAd,EADyB;eAA3B;aAFK;WAlBS,CAAlB,CADa;AA0Bb,iBAAO,IAAP,CAAY,KAAK,SAAL,EAAgB,YAA5B,EA1Ba;SAAf;;AA6BA,eAAO,CAAC,MAAD,EAAS,QAAT,CAAP,CAlCiC;;;;8CAqCX,MAAM;AAC5B,eAAO,MAAM,KAAK,GAAL,CAAS,CAAT,EAAY,CAAC,OAAO,EAAP,CAAD,GAAc,EAAd,CAAlB,CADqB;;;;WA/C1B;IAAa,QAAQ,OAAR,EAD0D;;AAqD7E,OAAK,YAAL,GAAoB,MAApB,CArD6E;AAsD7E,OAAK,aAAL,GAAqB,MAArB,CAtD6E;;AAwD7E,SAAO,IAAP,CAxD6E;CAAzB,CAAtD","file":"mtof.js","sourcesContent":["define(['lodash', 'app/vobjects/vobject', 'app/msg'], (_, vobject, Message) => {\n  class MtoF extends vobject.VObject {\n    numInputs() { return 1; }\n    numOutputs() { return 2; }\n\n    constructor(options) {\n      super(options);\n      this._lastFreq = 0.0;\n      this._notesOn = 0;\n    }\n\n    generate(context, inputs, outputs) {\n      const result = context.getBuffer();\n      const gateMsgs = [];\n      let lastNoteTime = 0;\n\n      if (inputs[0]) {\n        inputs[0].forEach((msg) => {\n          // msg is expected to be the format created by 'midi'.\n          if (msg.data.type === 0x90) { // note on\n            this._lastFreq = this.frequencyFromNoteNumber(msg.data.note);\n            // The notes occured at an earlier sample time, so we need to move\n            // them forward into this context's frame - add the current buffer\n            // len to them. TODO - maybe it's necessary to delay even more?\n            // this will cause jitter if the note occurred any earlier than the\n            // previous buffer render period, which I suspect might be common\n            // ..\n            let sampleOffset = (msg.sampleTime + result.length) - context.sampleTime;\n            if (sampleOffset < 0) {\n              sampleOffset = 0;\n            }\n            result.fill(this._lastFreq, lastNoteTime, sampleOffset);\n            lastNoteTime = sampleOffset;\n            gateMsgs.push(new Message(msg.sampleTime + result.length, 1));\n            this._notesOn++;\n          } else if (msg.data.type === 0x80) {\n            // don't release the gate while we've still got notes on\n            if (--this._notesOn === 0) {\n              gateMsgs.push(new Message(msg.sampleTime + result.length, 0));\n            }\n          }\n        });\n        result.fill(this._lastFreq, lastNoteTime);\n      }\n\n      return [result, gateMsgs];\n    }\n\n    frequencyFromNoteNumber(note) {\n      return 440 * Math.pow(2, (note - 69) / 12);\n    }\n  }\n\n  MtoF.vobjectClass = 'mtof';\n  MtoF.vobjectSymbol = 'mtof';\n\n  return MtoF;\n});\n"]}